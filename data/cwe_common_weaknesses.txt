[CWE-79] Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
Описание: Приложение включает недоверенные данные в веб-страницу без надлежащей валидации или экранирования, что позволяет выполнять произвольный JavaScript в браузере жертвы.
Тренд: Ранг #1 в 2023 (был #2 в 2022) — восходящий тренд.
KEV: 3 уязвимости в каталоге CISA Known Exploited Vulnerabilities.
Примеры уязвимого кода:
  // JavaScript
  document.getElementById("name").innerHTML = getParameter("name");
  
  <!-- Python Flask (без autoescape) -->
  return render_template_string("<h1>Hello {{ name }}</h1>", name=user_input)

Рекомендации:
- Никогда не вставляйте пользовательский ввод в innerHTML — используйте textContent.
- В шаблонах используйте автоматическое экранирование (Jinja2, Thymeleaf, React).
- Санируйте HTML через DOMPurify, если вставка HTML обязательна.
- Настройте Content Security Policy (CSP).

---
[CWE-787] Out-of-bounds Write
Описание: Программа записывает данные за пределы выделенного буфера, что может привести к повреждению памяти, сбоям или выполнению произвольного кода.
Тренд: Ранг #2 (был #1) — нисходящий тренд, но остаётся критичным.
KEV: 18 уязвимостей в KEV — самое высокое значение в списке.
Примеры уязвимого кода:
  // C
  char buf[10];
  strcpy(buf, user_input); // если user_input > 10 байт — переполнение

Рекомендации:
- Используйте безопасные функции: strncpy, snprintf, std::string.
- Включите ASLR, DEP, Stack Canaries в компиляторе.
- Проводите фаззинг и статический анализ (например, через AddressSanitizer).

---
[CWE-89] Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
Описание: Данные от пользователя встраиваются в SQL-запрос без параметризации, позволяя атакующему изменять логику запроса.
Тренд: Ранг #3 (без изменений).
KEV: 4 уязвимости в KEV.
Примеры уязвимого кода:
  # Python
  query = "SELECT * FROM users WHERE name = '" + name + "'"
  cursor.execute(query)

  // Java
  String sql = "SELECT * FROM products WHERE id = " + userInput;
  stmt.executeQuery(sql);

Рекомендации:
- Используйте параметризованные запросы (Prepared Statements).
- Избегайте конкатенации строк в SQL.
- ORM (например, SQLAlchemy, Hibernate) безопасен только при использовании параметров, а не f-строк.

---
[CWE-352] Cross-Site Request Forgery (CSRF)
Описание: Атакующий заставляет аутентифицированного пользователя выполнить нежелательное действие через поддельный запрос.
Тренд: Ранг #4 (был #9) — резкий рост (+5 позиций).
KEV: 0, но высокий риск в веб-приложениях.
Примеры уязвимого кода:
  <!-- Форма без CSRF-токена -->
  <form action="/transfer" method="POST">
    <input name="to" value="attacker">
    <input name="amount" value="1000">
  </form>

Рекомендации:
- Используйте анти-CSRF токены (synchronizer token pattern).
- Для API — требуйте заголовок `X-Requested-With` или используйте SameSite cookies.
- Проверяйте Origin/Referer при критических операциях.

---
[CWE-22] Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')
Описание: Атакующий может читать или записывать файлы за пределами целевой директории с помощью последовательностей вроде `../`.
Тренд: Ранг #5 (был #8) — рост (+3).
KEV: 4 уязвимости.
Примеры уязвимого кода:
  # Python
  filename = request.args.get('file')
  with open(f"uploads/{filename}") as f:  # Уязвимо к ../../etc/passwd

Рекомендации:
- Никогда не используйте пользовательский ввод в путях напрямую.
- Валидируйте имена файлов по белому списку (только буквенно-цифровые символы).
- Используйте `os.path.realpath()` и проверяйте, что путь остаётся внутри разрешённой директории.

---
[CWE-125] Out-of-bounds Read
Описание: Чтение данных за пределами выделенного буфера, что может привести к утечке памяти или сбою.
Тренд: Ранг #6 (был #7) — рост.
KEV: 3 уязвимости.
Рекомендации:
- Используйте безопасные языки (Rust, Go, Java) или стандартные контейнеры с проверкой границ.
- В C/C++ — всегда проверяйте индексы.

---
[CWE-78] Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')
Описание: Выполнение произвольных системных команд через уязвимый ввод.
Тренд: Ранг #7 (был #5) — снижение.
KEV: 5 уязвимостей.
Примеры:
  # Python
  os.system("ping " + ip_address)  # если ip_address = "8.8.8.8; rm -rf /"

Рекомендации:
- Избегайте вызова shell-команд с пользовательским вводом.
- Используйте `subprocess.run([cmd, arg1, arg2], shell=False)`.
- Валидируйте и экранируйте аргументы.

---
[CWE-416] Use After Free
Описание: Использование указателя после освобождения памяти — может привести к RCE.
Тренд: Ранг #8 (был #4) — снижение.
KEV: 5 уязвимостей.
Рекомендации:
- Используйте языки со сборкой мусора или умные указатели (C++: unique_ptr, shared_ptr).
- Применяйте статический и динамический анализ памяти.

---
[CWE-862] Missing Authorization
Описание: Отсутствие проверки прав доступа к функции или ресурсу.
Тренд: Ранг #9 (был #11) — рост.
KEV: 0, но критично для бизнес-логики.
Пример:
  // API endpoint без проверки роли
  @app.route('/api/delete-user/<id>')
  def delete_user(id): ...

Рекомендации:
- Внедрите проверку авторизации на каждом endpoint'е.
- Используйте централизованные middleware для контроля доступа.

---
[CWE-434] Unrestricted Upload of File with Dangerous Type
Описание: Возможность загружать файлы без проверки типа (например, .php, .exe).
Тренд: Ранг #10.
KEV: 0.
Рекомендации:
- Проверяйте MIME-тип и сигнатуру файла, а не только расширение.
- Храните загруженные файлы вне веб-корня.
- Переименовывайте файлы (например, в UUID).

---
[CWE-94] Improper Control of Generation of Code ('Code Injection')
Описание: Генерация и выполнение кода на основе недоверенных данных.
Тренд: Ранг #11 (был #23!) — резкий рост (+12).
KEV: 7 уязвимостей.
Пример:
  eval(user_input)  // Python, JS, PHP

Рекомендации:
- Никогда не используйте eval(), exec(), Function() с пользовательским вводом.
- Используйте безопасные парсеры (например, ast.literal_eval в Python).

---
[CWE-20] Improper Input Validation
Описание: Недостаточная или отсутствующая валидация входных данных.
Тренд: Ранг #12 (был #6) — снижение.
KEV: 1.
Рекомендации:
- Валидируйте все входные данные по белому списку (длина, формат, тип).
- Используйте схемы валидации (например, Pydantic, Joi).

---
[CWE-77] Improper Neutralization of Special Elements used in a Command ('Command Injection')
Описание: Аналогично CWE-78, но может включать не-shell команды (например, через API).
Тренд: Ранг #13 (был #16) — рост.
KEV: 4.
Рекомендации: То же, что и для CWE-78 — избегайте динамического выполнения команд.

---
[CWE-287] Improper Authentication
Описание: Слабая или отсутствующая аутентификация.
Тренд: Ранг #14 (был #13) — небольшое снижение.
KEV: 4.
Рекомендации:
- Используйте стандартные фреймворки (OAuth 2.0, OpenID Connect).
- Внедрите MFA.

---
[CWE-269] Improper Privilege Management
Описание: Неправильное управление привилегиями (например, пользователь получает права администратора).
Тренд: Ранг #15 (был #22) — резкий рост (+7).
KEV: 0.
Рекомендации:
- Принцип минимальных привилегий.
- Разделяйте роли (RBAC).

---
[CWE-502] Deserialization of Untrusted Data
Описание: Десериализация данных от недоверенного источника может привести к RCE.
Тренд: Ранг #16 (был #15).
KEV: 5.
Пример:
  pickle.loads(user_data)  # Python

Рекомендации:
- Избегайте нативных механизмов десериализации (pickle, Java serialization).
- Используйте JSON, Protocol Buffers с валидацией.

---
[CWE-200] Exposure of Sensitive Information to an Unauthorized Actor
Описание: Раскрытие конфиденциальных данных (пароли, ключи, PII).
Тренд: Ранг #17 (был #30!) — резкий рост (+13).
KEV: 0.
Рекомендации:
- Не логируйте чувствительные данные.
- Шифруйте данные в покое и при передаче.
- Используйте .env файлы и секрет-менеджеры.

---
[CWE-863] Incorrect Authorization
Описание: Проверка авторизации реализована, но содержит логические ошибки.
Тренд: Ранг #18 (был #24) — рост (+6).
KEV: 2.
Пример:
  if user.role != "admin": return 403  # но забыли проверить для /api/users/<id>

Рекомендации:
- Тестируйте авторизацию на всех endpoint'ах.
- Используйте декларативные политики.

---
[CWE-918] Server-Side Request Forgery (SSRF)
Описание: Сервер выполняет HTTP-запросы по указанию атакующего, включая внутренние ресурсы.
Тренд: Ранг #19.
KEV: 2.
Рекомендации:
- Валидируйте URL по белому списку доменов.
- Отключите file://, gopher:// и другие опасные схемы.
- Используйте прокси с фильтрацией.

---
[CWE-119] Improper Restriction of Operations within the Bounds of a Memory Buffer
Описание: Общая категория для переполнений буфера.
Тренд: Ранг #20 (был #17).
KEV: 2.
Рекомендации: То же, что и для CWE-787 — безопасные функции, ASLR, фаззинг.

---
[CWE-476] NULL Pointer Dereference
Описание: Разыменование нулевого указателя — приводит к сбою.
Тренд: Ранг #21 (был #12) — резкое падение.
KEV: 0.
Рекомендации:
- Проверяйте указатели перед использованием.
- Используйте Optional (Java, C#) или Option (Rust).

---
[CWE-798] Use of Hard-coded Credentials
Описание: Пароли, ключи или токены зашиты прямо в код.
Тренд: Ранг #22 (был #18).
KEV: 2.
Рекомендации:
- Никогда не храните секреты в коде.
- Используйте переменные окружения, Vault, AWS Secrets Manager.

---
[CWE-190] Integer Overflow or Wraparound
Описание: Целочисленное переполнение приводит к неправильному выделению памяти или логике.
Тренд: Ранг #23 (был #14) — падение.
KEV: 3.
Рекомендации:
- Используйте безопасные арифметические библиотеки.
- Включите проверки переполнения в компиляторе.

---
[CWE-400] Uncontrolled Resource Consumption ('Resource Exhaustion')
Описание: Атакующий исчерпывает ресурсы (память, CPU, диск).
Тренд: Ранг #24 (был #37!) — резкий рост (+13).
KEV: 0.
Пример:
  // Регулярное выражение с катастрофическим backtracking
  re.match(r'(a+)+$', 'a' * 1000000 + '!')

Рекомендации:
- Ограничивайте размер входных данных.
- Используйте таймауты и лимиты (rate limiting, memory limits).

---
[CWE-306] Missing Authentication for Critical Function
Описание: Критическая функция (например, сброс пароля) не требует аутентификации.
Тренд: Ранг #25 (был #20).
KEV: 5.
Рекомендации:
- Все критические операции должны требовать аутентификации и авторизации.

---